// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List               = require("bs-platform/lib/js/list.js");
var Pervasives         = require("bs-platform/lib/js/pervasives.js");
var Js_mapperRt        = require("bs-platform/lib/js/js_mapperRt.js");
var Utils$AdventOfCode = require("./Utils.bs.js");

var jsMapperConstantArray = /* array */[
  /* tuple */[
    78,
    "N"
  ],
  /* tuple */[
    83,
    "S"
  ],
  /* tuple */[
    17463,
    "NE"
  ],
  /* tuple */[
    17481,
    "NW"
  ],
  /* tuple */[
    18578,
    "SE"
  ],
  /* tuple */[
    18596,
    "SW"
  ]
];

function directionToJs(param) {
  return Js_mapperRt.binSearch(6, param, jsMapperConstantArray);
}

function directionFromJs(param) {
  return Js_mapperRt.revSearch(6, jsMapperConstantArray, param);
}

function step(param, direction) {
  var z = param[2];
  var y = param[1];
  var x = param[0];
  if (direction >= 17463) {
    if (direction >= 18578) {
      if (direction >= 18596) {
        return /* tuple */[
                x - 1 | 0,
                y,
                z + 1 | 0
              ];
      } else {
        return /* tuple */[
                x + 1 | 0,
                y - 1 | 0,
                z
              ];
      }
    } else if (direction >= 17481) {
      return /* tuple */[
              x - 1 | 0,
              y + 1 | 0,
              z
            ];
    } else {
      return /* tuple */[
              x + 1 | 0,
              y,
              z - 1 | 0
            ];
    }
  } else if (direction >= 83) {
    return /* tuple */[
            x,
            y - 1 | 0,
            z + 1 | 0
          ];
  } else {
    return /* tuple */[
            x,
            y + 1 | 0,
            z - 1 | 0
          ];
  }
}

function directionOfString(param) {
  return Utils$AdventOfCode.$great$great(directionFromJs, (function (param) {
                return Utils$AdventOfCode.expect("Unrecognized direction", param);
              }), param);
}

var origin = /* tuple */[
  0,
  0,
  0
];

function distance(param, param$1) {
  return ((Pervasives.abs(param[0] - param$1[0] | 0) + Pervasives.abs(param[1] - param$1[1] | 0) | 0) + Pervasives.abs(param[2] - param$1[2] | 0) | 0) / 2 | 0;
}

function distanceFromOrigin(param) {
  return distance(origin, param);
}

function walk($staropt$star, origin, steps) {
  var onStep = $staropt$star ? $staropt$star[0] : step;
  return List.fold_left(onStep, origin, steps);
}

function stepsOfString(str) {
  return List.map(directionOfString, Utils$AdventOfCode.splitString(",", str));
}

function farthestDistance(steps) {
  var farthestDistance$1 = [0];
  var recordDistance = function (pos) {
    var d = distanceFromOrigin(pos);
    if (d > farthestDistance$1[0]) {
      farthestDistance$1[0] = d;
    }
    return pos;
  };
  walk(/* Some */[(function (pos) {
            return (function (param) {
                return Utils$AdventOfCode.$great$great((function (param) {
                              return step(pos, param);
                            }), recordDistance, param);
              });
          })], origin, stepsOfString(steps));
  return farthestDistance$1[0];
}

function finalDistance(steps) {
  return distanceFromOrigin(walk(/* None */0, origin, stepsOfString(steps)));
}

exports.directionToJs      = directionToJs;
exports.directionFromJs    = directionFromJs;
exports.step               = step;
exports.directionOfString  = directionOfString;
exports.origin             = origin;
exports.distance           = distance;
exports.distanceFromOrigin = distanceFromOrigin;
exports.walk               = walk;
exports.stepsOfString      = stepsOfString;
exports.farthestDistance   = farthestDistance;
exports.finalDistance      = finalDistance;
/* No side effect */
