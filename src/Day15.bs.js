// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry      = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

var generate = (
  function(x, y) {
    return (x * y) % 2147483647;
  }
);

var genA = Curry._1(generate, 16807);

var genB = Curry._1(generate, 48271);

var judge = (function(x, y) {
    return (x & 0b1111111111111111) === (y & 0b1111111111111111) ? 1 : 0;}
);

function pickyGenerator(multipleOf, generator, prev) {
  var _prev = prev;
  while(true) {
    var prev$1 = _prev;
    var i = Curry._1(generator, prev$1);
    if (Caml_int32.mod_(i, multipleOf)) {
      _prev = i;
      continue ;
      
    } else {
      return i;
    }
  };
}

function pickyGenA(param) {
  return pickyGenerator(4, genA, param);
}

function pickyGenB(param) {
  return pickyGenerator(8, genB, param);
}

function countMatches(limit, param, param$1) {
  var genB = param[1];
  var genA = param[0];
  var _param = /* tuple */[
    param$1[0],
    param$1[1]
  ];
  var _matches = 0;
  var _i = 0;
  while(true) {
    var param$2 = _param;
    var i = _i;
    var matches = _matches;
    if (i <= limit) {
      var numB = param$2[1];
      var numA = param$2[0];
      var match = Curry._2(judge, numA, numB);
      _i = i + 1 | 0;
      _matches = matches + (
        match !== 0 ? 1 : 0
      ) | 0;
      _param = /* tuple */[
        Curry._1(genA, numA),
        Curry._1(genB, numB)
      ];
      continue ;
      
    } else {
      return matches;
    }
  };
}

console.log(countMatches(5000000, /* tuple */[
          pickyGenA,
          pickyGenB
        ], /* tuple */[
          722,
          354
        ]));

exports.generate       = generate;
exports.genA           = genA;
exports.genB           = genB;
exports.judge          = judge;
exports.pickyGenerator = pickyGenerator;
exports.pickyGenA      = pickyGenA;
exports.pickyGenB      = pickyGenB;
exports.countMatches   = countMatches;
/* generate Not a pure module */
