// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Hashtbl                 = require("bs-platform/lib/js/hashtbl.js");
var Pervasives              = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions         = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var InvalidDirection = Caml_exceptions.create("Day3-AdventOfCode.InvalidDirection");

function turnLeft(dir) {
  var switcher = dir[0] + 1 | 0;
  if (switcher > 2 || switcher < 0) {
    throw InvalidDirection;
  } else {
    switch (switcher) {
      case 0 : 
          if (dir[1] !== 0) {
            throw InvalidDirection;
          } else {
            return /* tuple */[
                    0,
                    -1
                  ];
          }
          break;
      case 1 : 
          var switcher$1 = dir[1] + 1 | 0;
          if (switcher$1 > 2 || switcher$1 < 0) {
            throw InvalidDirection;
          } else {
            switch (switcher$1) {
              case 0 : 
                  return /* tuple */[
                          1,
                          0
                        ];
              case 1 : 
                  throw InvalidDirection;
              case 2 : 
                  return /* tuple */[
                          -1,
                          0
                        ];
              
            }
          }
          break;
      case 2 : 
          if (dir[1] !== 0) {
            throw InvalidDirection;
          } else {
            return /* tuple */[
                    0,
                    1
                  ];
          }
          break;
      
    }
  }
}

function walkUntil(num) {
  var sideLength = 1;
  var direction = /* tuple */[
    1,
    0
  ];
  var coordinates = /* tuple */[
    0,
    0
  ];
  var stepsUntilChange = 1;
  var sidesUntilChange = 2;
  var currentValue = 1;
  while(currentValue < num) {
    if (!stepsUntilChange) {
      sidesUntilChange = sidesUntilChange - 1 | 0;
      if (!sidesUntilChange) {
        sideLength = sideLength + 1 | 0;
        sidesUntilChange = 2;
      }
      direction = turnLeft(direction);
      stepsUntilChange = sideLength;
    }
    var match = coordinates;
    var match$1 = direction;
    coordinates = /* tuple */[
      match[0] + match$1[0] | 0,
      match[1] + match$1[1] | 0
    ];
    currentValue = currentValue + 1 | 0;
    stepsUntilChange = stepsUntilChange - 1 | 0;
  };
  var match$2 = coordinates;
  return Pervasives.abs(match$2[0]) + Pervasives.abs(match$2[1]) | 0;
}

function safeFind(tbl, loc) {
  try {
    return Hashtbl.find(tbl, loc);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return 0;
    } else {
      throw exn;
    }
  }
}

function sumNeighbors(tbl, param) {
  var origY = param[1];
  var origX = param[0];
  var sum = 0;
  for(var x = origX - 1 | 0 ,x_finish = origX + 1 | 0; x <= x_finish; ++x){
    for(var y = origY - 1 | 0 ,y_finish = origY + 1 | 0; y <= y_finish; ++y){
      sum = sum + safeFind(tbl, /* tuple */[
            x,
            y
          ]) | 0;
    }
  }
  return sum;
}

function computeTable(untilFirstAbove) {
  var tbl = Hashtbl.create(/* None */0, 1000);
  Hashtbl.add(tbl, /* tuple */[
        0,
        0
      ], 1);
  var sideLength = 1;
  var direction = /* tuple */[
    1,
    0
  ];
  var coordinates = /* tuple */[
    0,
    0
  ];
  var stepsUntilChange = 1;
  var sidesUntilChange = 2;
  var currentValue = 1;
  while(currentValue <= untilFirstAbove) {
    if (!stepsUntilChange) {
      sidesUntilChange = sidesUntilChange - 1 | 0;
      if (!sidesUntilChange) {
        sideLength = sideLength + 1 | 0;
        sidesUntilChange = 2;
      }
      direction = turnLeft(direction);
      stepsUntilChange = sideLength;
    }
    var match = coordinates;
    var match$1 = direction;
    coordinates = /* tuple */[
      match[0] + match$1[0] | 0,
      match[1] + match$1[1] | 0
    ];
    currentValue = sumNeighbors(tbl, coordinates);
    Hashtbl.add(tbl, coordinates, currentValue);
    stepsUntilChange = stepsUntilChange - 1 | 0;
  };
  return currentValue;
}

console.log(computeTable(277678));

exports.InvalidDirection = InvalidDirection;
exports.turnLeft         = turnLeft;
exports.walkUntil        = walkUntil;
exports.safeFind         = safeFind;
exports.sumNeighbors     = sumNeighbors;
exports.computeTable     = computeTable;
/*  Not a pure module */
